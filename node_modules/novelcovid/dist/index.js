"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const json = (res) => res.json();
class NovelCovid {
    constructor() {
        this.baseURL = 'https://corona.lmao.ninja';
    }
    /**
     * @description Gets all the information from the api.
     * @returns {Promise<All>}
     */
    async all() {
        return node_fetch_1.default(`${this.baseURL}/v2/all`).then(json);
    }
    async yesterday(country, sort) {
        if (country) {
            return node_fetch_1.default(`${this.baseURL}/v2/yesterday/${country}`).then(json);
        }
        else if (!country && sort) {
            return node_fetch_1.default(`${this.baseURL}/v2/yesterday?sort=${sort}`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/v2/yesterday`).then(json);
    }
    /**
     * @description Gets all the effected country names.
     * @returns {Promise<Array<String>>}
     */
    async countryNames() {
        const countries = await this.countries();
        return countries.map(x => x.country);
    }
    async countries(country, sort) {
        if (country) {
            return node_fetch_1.default(`${this.baseURL}/v2/countries/${country}`).then(json);
        }
        else if (!country && sort) {
            return node_fetch_1.default(`${this.baseURL}/v2/countries?sort=${sort}`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/v2/countries`).then(json);
    }
    /**
     * @description Fetches data of corona virus in United States.
     * @returns {Promise<Array<State>>}
     */
    async states() {
        return node_fetch_1.default(`${this.baseURL}/v2/states`).then(json);
    }
    async historical(all, country, province) {
        if (country && !province && !all) {
            return node_fetch_1.default(`${this.baseURL}/v2/historical/${country}`).then(json);
        }
        else if (country && province && !all) {
            return node_fetch_1.default(`${this.baseURL}/v2/historical/${country}/${province}`).then(json);
        }
        else if (all) {
            return node_fetch_1.default(`${this.baseURL}/v2/historical/all`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/v2/historical`).then(json);
    }
    async jhucsse(counties, countyname) {
        if (counties && !countyname) {
            return node_fetch_1.default(`${this.baseURL}/v2/jhucsse/counties`).then(json);
        }
        else if (counties && countyname) {
            return node_fetch_1.default(`${this.baseURL}/v2/jhucsse/counties/${countyname}`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/v2/jhucsse`).then(json);
    }
}
exports.NovelCovid = NovelCovid;
