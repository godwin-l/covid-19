export declare class NovelCovid {
    baseURL: string;
    constructor();
    /**
     * @description Gets all the information from the api.
     * @returns {Promise<All>}
     */
    all(): Promise<All>;
    /**
     * @description Gets yesterday's information from the api.
     * @param {?string} [country=null] - Country details you want to fetch.
     * @param {?string} sort - Sort by active, deaths , etc.
     * @returns {Promise<Array<Country>| Country |null>}
     */
    yesterday(country?: string | null | number): Promise<Country | Array<Country> | null>;
    yesterday(country: null, sort?: keyof CountrySort): Promise<Array<Country>>;
    /**
     * @description Gets all the effected country names.
     * @returns {Promise<Array<String>>}
     */
    countryNames(): Promise<Array<string>>;
    /**
     * @description Fetches data of corona virus by country.
     * @param {?string} [country=null] - Country details you want to fetch.
     * @param {?string} sort - Sort by active, deaths , etc.
     * @returns {Promise<Array<Country>| Country |null>}
     */
    countries(country?: string | null | number): Promise<Country | Array<Country> | null>;
    countries(country: null, sort?: keyof CountrySort): Promise<Array<Country>>;
    /**
     * @description Fetches data of corona virus in United States.
     * @returns {Promise<Array<State>>}
     */
    states(): Promise<Array<State>>;
    /**
     * @description Get historical data from the start of 2020. (JHU CSSE GISand Data).
     * @param {?boolean} [all=null] - Returns  all the cases and deaths.
     * @param {?string} [country=null] -  Returns data of a specific country.
     * @param {?string} [province=null] - Get a province within a country's time series.
     * @returns {Promise<Array<Historical> | HistoricalAll | HistoricalCountry | Array<HistoricalCountry> | null>}
     */
    historical(): Promise<Array<Historical>>;
    historical(all?: boolean | null): Promise<HistoricalAll>;
    historical(all: null, country: string | null, province?: string | null): Promise<HistoricalCountry | Array<HistoricalCountry> | null>;
    /**
     * @description Return data from the John Hopkins CSSE Data Repository (Provinces and such).
     * @param {?boolean} [countries=null] - If method should return counties
     * @param {?string} countryname - County name if counties is true.
     * @returns {Promise<Array<Jhucsse> | Array<JhucsseCounties> | null>}
     */
    jhucsse(): Promise<Array<Jhucsse>>;
    jhucsse(counties?: boolean | null, countyname?: string | null): Promise<Array<JhucsseCounties> | null>;
}
export interface All {
    cases: number;
    deaths: number;
    recovered: number;
    updated: number;
    active: number;
    todayCases: number;
    todayDeaths: number;
    critical: number;
    casesPerOneMillion: number;
    deathsPerOneMillion: number;
    tests: number;
    testsPerOneMillion: number;
    affectedCountries: number;
}
export interface Country {
    country: string;
    countryInfo: {
        _id: number;
        latitude: number;
        longitue: number;
        flag: string;
        iso3: string;
        iso2: string;
    };
    cases: number;
    todayCases: number;
    deaths: number;
    todayDeaths: number;
    recovered: number;
    active: number;
    critical: number;
    casesPerOneMillion: number;
    deathsPerOneMillion: number;
    updated: number;
    tests: number;
    testsPerOneMillion: number;
}
export interface State {
    state: string;
    cases: number;
    todayCases: number;
    deaths: number;
    todayDeaths: number;
    active: number;
    tests: number;
    testsPerOneMillion: number;
}
export interface Historical {
    country: string;
    province: string | null;
    timeline: Stats<object>;
}
export interface HistoricalCountry {
    country: string;
    provinces: string[] | null;
    timeline: Stats<object>;
}
export interface Jhucsse {
    country: string;
    province: Array<string> | string | null;
    updatedAt: Date;
    stats: Stats<number>;
    coordinates: {
        latitude: string;
        longitude: string;
    };
}
export interface JhucsseCounties {
    country: string;
    province: string | null;
    updatedAt: Date;
    county: string;
    stats: Stats<number>;
    coordinates: {
        latitude: string;
        longitude: string;
    };
}
export interface CountrySort {
    cases: number;
    todayCases: number;
    deaths: number;
    recovered: number;
    active: number;
    critical: number;
    casesPerOneMillion: number;
    deathsPerOneMillion: number;
}
export interface HistoricalAll extends Stats<object> {
}
export interface Stats<T> {
    confirmed: T;
    deaths: T;
    recovered: T;
}
